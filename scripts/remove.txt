let isRemoveColorClickMode = false;
let sensitivityValueClick = 75;
let isRemoveColorTotalMode = false;
let sensitivityValueTotal = 75;

document.getElementById('removeColor').addEventListener('click', openRemoveColorBox);
document.getElementById('applyRemoveColor').addEventListener('click', applyRemoveColor);
document.getElementById('cancelRemoveColor').addEventListener('click', closeRemoveColorBox);

document.getElementById('colorSensitivitySlider').addEventListener('input', updateColorSensitivity);

function openRemoveColorBox() {
    const removeColorBox = document.getElementById('removeColorFloatingBox');
    removeColorBox.style.display = 'block';

    const removeColorCanvas = document.getElementById('removeColorCanvas');
    const activeObject = canvas.getActiveObject();
    if (!activeObject || activeObject.type !== 'image') {
        alert('Por favor, selecione uma imagem primeiro!');
        closeRemoveColorBox();
        return;
    }

    prepareCanvasForColorRemoval(activeObject);
}

function closeRemoveColorBox() {
    document.getElementById('removeColorFloatingBox').style.display = 'none';
}

function updateColorSensitivity() {
    sensitivityValueClick = parseInt(document.getElementById('colorSensitivitySlider').value);
    document.getElementById('colorSensitivityValue').textContent = sensitivityValueClick;
}

function prepareCanvasForColorRemoval(imageObject) {
    const removeColorCanvas = document.getElementById('removeColorCanvas');
    const removeColorCtx = removeColorCanvas.getContext('2d');

    // Ajustar o tamanho do canvas para o espaço disponível
    const boxWidth = window.innerWidth * 0.8; // 80% da largura da janela
    const boxHeight = window.innerHeight * 0.8; // 80% da altura da janela
    removeColorCanvas.width = boxWidth;
    removeColorCanvas.height = boxHeight;
    removeColorCtx.clearRect(0, 0, removeColorCanvas.width, removeColorCanvas.height);

    const img = new Image();
    img.src = imageObject.getSrc();
    img.onload = function() {
        const aspectRatio = img.width / img.height;
        let width, height;
        if (aspectRatio > 1) {
            width = boxWidth;
            height = width / aspectRatio;
        } else {
            height = boxHeight;
            width = height * aspectRatio;
        }
        removeColorCtx.drawImage(img, 0, 0, width, height);
    };

    removeColorCanvas.addEventListener('click', function(e) {
        const rect = removeColorCanvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const imageData = removeColorCtx.getImageData(0, 0, removeColorCanvas.width, removeColorCanvas.height);
        const targetColor = getPixelColor(imageData, x, y);

        floodFillRemove(imageData, x, y, sensitivityValueClick, targetColor);

        removeColorCtx.putImageData(imageData, 0, 0);
    });
}

function applyRemoveColor() {
    const removeColorCanvas = document.getElementById('removeColorCanvas');
    const activeObject = canvas.getActiveObject();
    if (activeObject && activeObject.type === 'image') {
        fabric.Image.fromURL(removeColorCanvas.toDataURL(), function(img) {
            canvas.remove(activeObject);
            canvas.add(img);
            canvas.setActiveObject(img);
            canvas.renderAll();
        });
    }
    closeRemoveColorBox();
}

function floodFillRemove(imageData, x, y, sensitivity, targetColor) {
    const width = imageData.width;
    const height = imageData.height;
    const data = imageData.data;
    const stack = [[x, y]];
    const processed = new Set();

    function colorMatch(color1, color2) {
        return Math.abs(color1.r - color2.r) <= sensitivity &&
               Math.abs(color1.g - color2.g) <= sensitivity &&
               Math.abs(color1.b - color2.b) <= sensitivity;
    }

    while (stack.length) {
        const [curX, curY] = stack.pop();
        const key = `${curX},${curY}`;
        if (processed.has(key)) continue;
        processed.add(key);
        const index = (curY * width + curX) * 4;
        const currentColor = {
            r: data[index],
            g: data[index + 1],
            b: data[index + 2],
            a: data[index + 3]
        };
        if (colorMatch(currentColor, targetColor) && currentColor.a !== 0) {
            data[index + 3] = 0; // Convert to transparent
            if (curX > 0) stack.push([curX - 1, curY]);
            if (curX < width - 1) stack.push([curX + 1, curY]);
            if (curY > 0) stack.push([curX, curY - 1]);
            if (curY < height - 1) stack.push([curX, curY + 1]);
        }
    }
}

function getPixelColor(imageData, x, y) {
    const index = (y * imageData.width + x) * 4;
    return {
        r: imageData.data[index],
        g: imageData.data[index + 1],
        b: imageData.data[index + 2],
        a: imageData.data[index + 3]
    };
}

document.getElementById('removeColorTotal').addEventListener('click', openRemoveColorTotalBox);
document.getElementById('applyRemoveColorTotal').addEventListener('click', applyRemoveColorTotal);
document.getElementById('cancelRemoveColorTotal').addEventListener('click', closeRemoveColorTotalBox);

document.getElementById('colorSensitivitySliderTotal').addEventListener('input', updateSensitivityTotal);

function openRemoveColorTotalBox() {
    const removeColorTotalBox = document.getElementById('removeColorTotalFloatingBox');
    removeColorTotalBox.style.display = 'block';

    const removeColorTotalCanvas = document.getElementById('removeColorTotalCanvas');
    const activeObject = canvas.getActiveObject();
    if (!activeObject || activeObject.type !== 'image') {
        alert('Por favor, selecione uma imagem primeiro!');
        closeRemoveColorTotalBox();
        return;
    }

    prepareCanvasForColorTotalRemoval(activeObject);
}

function closeRemoveColorTotalBox() {
    document.getElementById('removeColorTotalFloatingBox').style.display = 'none';
}

function updateSensitivityTotal() {
    sensitivityValueTotal = parseInt(document.getElementById('colorSensitivitySliderTotal').value);
    document.getElementById('colorSensitivityValueTotal').textContent = sensitivityValueTotal;
}

function prepareCanvasForColorTotalRemoval(imageObject) {
    const removeColorTotalCanvas = document.getElementById('removeColorTotalCanvas');
    const removeColorTotalCtx = removeColorTotalCanvas.getContext('2d');

    // Ajustar o tamanho do canvas para o espaço disponível
    const boxWidth = window.innerWidth * 0.8; // 80% da largura da janela
    const boxHeight = window.innerHeight * 0.8; // 80% da altura da janela
    removeColorTotalCanvas.width = boxWidth;
    removeColorTotalCanvas.height = boxHeight;
    removeColorTotalCtx.clearRect(0, 0, removeColorTotalCanvas.width, removeColorTotalCanvas.height);

    const img = new Image();
    img.src = imageObject.getSrc();
    img.onload = function() {
        const aspectRatio = img.width / img.height;
        let width, height;
        if (aspectRatio > 1) {
            width = boxWidth;
            height = width / aspectRatio;
        } else {
            height = boxHeight;
            width = height * aspectRatio;
        }
        removeColorTotalCtx.drawImage(img, 0, 0, width, height);
    };

    removeColorTotalCanvas.addEventListener('click', function(e) {
        const rect = removeColorTotalCanvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const imageData = removeColorTotalCtx.getImageData(0, 0, removeColorTotalCanvas.width, removeColorTotalCanvas.height);
        const targetColor = getPixelColor(imageData, x, y);

        removeColorTotal(imageData, targetColor);

        removeColorTotalCtx.putImageData(imageData, 0, 0);
    });
}

function applyRemoveColorTotal() {
    const removeColorTotalCanvas = document.getElementById('removeColorTotalCanvas');
    const activeObject = canvas.getActiveObject();
    if (activeObject && activeObject.type === 'image') {
        fabric.Image.fromURL(removeColorTotalCanvas.toDataURL(), function(img) {
            canvas.remove(activeObject);
            canvas.add(img);
            canvas.setActiveObject(img);
            canvas.renderAll();
        });
    }
    closeRemoveColorTotalBox();
}

function removeColorTotal(imageData, targetColor) {
    const transparentColor = {r: 0, g: 0, b: 0, a: 0};

    for (let i = 0; i < imageData.data.length; i += 4) {
        const currentColor = {
            r: imageData.data[i],
            g: imageData.data[i + 1],
            b: imageData.data[i + 2],
            a: imageData.data[i + 3]
        };

        if (colorMatch(currentColor, targetColor)) {
            setPixelColor(imageData, i, transparentColor);
        }
    }
}

function setPixelColor(imageData, index, color) {
    imageData.data[index] = color.r;
    imageData.data[index + 1] = color.g;
    imageData.data[index + 2] = color.b;
    imageData.data[index + 3] = color.a;
}

function colorMatch(color1, color2) {
    const threshold = sensitivityValueTotal;
    return Math.abs(color1.r - color2.r) <= threshold &&
           Math.abs(color1.g - color2.g) <= threshold &&
           Math.abs(color1.b - color2.b) <= threshold;
}

function trimTransparentArea(imageData) {
    const width = imageData.width;
    const height = imageData.height;
    const data = imageData.data;

    let top = height;
    let bottom = 0;
    let left = width;
    let right = 0;

    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            const index = (y * width + x) * 4;
            if (data[index + 3] !== 0) {
                if (y < top) top = y;
                if (y > bottom) bottom = y;
                if (x < left) left = x;
                if (x > right) right = x;
            }
        }
    }

    const newWidth = right - left + 1;
    const newHeight = bottom - top + 1;
    const newImageData = new ImageData(newWidth, newHeight);
    const newData = newImageData.data;

    for (let y = top; y <= bottom; y++) {
        for (let x = left; x <= right; x++) {
            const oldIndex = (y * width + x) * 4;
            const newIndex = ((y - top) * newWidth + (x - left)) * 4;
            newData[newIndex] = data[oldIndex];
            newData[newIndex + 1] = data[oldIndex + 1];
            newData[newIndex + 2] = data[oldIndex + 2];
            newData[newIndex + 3] = data[oldIndex + 3];
        }
    }

    return newImageData;
}

function applyRemoveColor() {
    const removeColorCanvas = document.getElementById('removeColorCanvas');
    const activeObject = canvas.getActiveObject();
    if (activeObject && activeObject.type === 'image') {
        const ctx = removeColorCanvas.getContext('2d');
        const imageData = ctx.getImageData(0, 0, removeColorCanvas.width, removeColorCanvas.height);
        const trimmedImageData = trimTransparentArea(imageData);
        const trimmedCanvas = document.createElement('canvas');
        trimmedCanvas.width = trimmedImageData.width;
        trimmedCanvas.height = trimmedImageData.height;
        const trimmedCtx = trimmedCanvas.getContext('2d');
        trimmedCtx.putImageData(trimmedImageData, 0, 0);

        fabric.Image.fromURL(trimmedCanvas.toDataURL(), function(img) {
            canvas.remove(activeObject);
            canvas.add(img);
            canvas.setActiveObject(img);
            canvas.renderAll();
        });
    }
    closeRemoveColorBox();
}

function applyRemoveColorTotal() {
    const removeColorTotalCanvas = document.getElementById('removeColorTotalCanvas');
    const activeObject = canvas.getActiveObject();
    if (activeObject && activeObject.type === 'image') {
        const ctx = removeColorTotalCanvas.getContext('2d');
        const imageData = ctx.getImageData(0, 0, removeColorTotalCanvas.width, removeColorTotalCanvas.height);
        const trimmedImageData = trimTransparentArea(imageData);
        const trimmedCanvas = document.createElement('canvas');
        trimmedCanvas.width = trimmedImageData.width;
        trimmedCanvas.height = trimmedImageData.height;
        const trimmedCtx = trimmedCanvas.getContext('2d');
        trimmedCtx.putImageData(trimmedImageData, 0, 0);

        fabric.Image.fromURL(trimmedCanvas.toDataURL(), function(img) {
            canvas.remove(activeObject);
            canvas.add(img);
            canvas.setActiveObject(img);
            canvas.renderAll();
        });
    }
    closeRemoveColorTotalBox();
}
